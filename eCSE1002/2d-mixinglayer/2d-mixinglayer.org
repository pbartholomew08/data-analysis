#+TITLE: 2D Mixing Layer
#+AUTHOR: Paul Bartholomew

#+LATEX_HEADER: \usepackage{fullpage}

* Initial conditions

The flow is periodic in $x$ with free-slip conditions in $y$ - assumed to be sufficiently far away
that the flow evolution is determined by the initial conditions only.

The velocity field is given as a hyperbolic-tangent profile:
\begin{equation}
U \left( y \right) = \frac{U_1 + U_2}{2} + \frac{U_1 - U_2}{2} \tanh \left( 2 \frac{y}{\delta} \right)
\end{equation}
where $\delta=1$ is the reference length scale.
This field is computed by
#+NAME: calc_meanvel
#+BEGIN_SRC python
  def calc_meanvel(u1, u2, ly=60.0, ny=501):
    """Calculates the mean velocity field as a function of y."""

    u = np.zeros(ny)
    y = np.zeros(ny)
    dy = ly / float(ny - 1)

    for i in range(ny):
      y[i] = i * dy - 0.5 * ly
      u[i] = (u1 + u2) + (u1 - u2) * math.tanh(2 * y[i])
      u[i] *= 0.5

    return u, y
#+END_SRC
and visualised as
#+BEGIN_SRC python :noweb strip-export :results file
  import numpy as np
  import math
  import matplotlib.pyplot as plt

  <<calc_u1u2>>
  <<calc_meanvel>>

  T1=2.0

  u1, u2 = calc_u1u2(T1)
  U, y = calc_meanvel(u1, u2)

  plt.plot(U, y)
  plt.axvline(u1, color="black", ls="--")
  plt.axvline(u2, color="black", ls="--")
  plt.xlabel("U")
  plt.ylabel("y")
  plt.savefig("2d-umean.png")
  return "2d-umean.png"
#+END_SRC

#+RESULTS:
[[file:2d-umean.png]]

The velocities $u_1$ and $u_2$ are constrained by the condition
\begin{equation}
U_c = \frac{\sqrt{T_1} U_2 + \sqrt{T_2} U_1}{\sqrt{T_1 + T_2}} = 0
\end{equation}
which, in Golanski2005, $T_1=2T_2$.
This constraint is computed by:
#+NAME: calc_u1u2
#+BEGIN_SRC python
  def calc_u1u2(T1, uc=0):
    """Calculates the velocity of streams 1 and 2 given the temperature of stream 1 for a given
    convective velocity.

    Note that T1 is given in terms of T2 which is used as the reference property, whilst the reference
    velocity scale is the velocity difference: U=u_1-u_2."""

    u1 = 1 / (1 + 1.0 / T1)**0.5
    u2 = u1 - 1

    return u1, u2
#+END_SRC

A perturbation is applied to this initial field, given as
\begin{align}
u' \left( x, y \right) &= Ae^{-\sigma{\left(y/\delta\right)}^2} \frac{\sigma}{\pi} \frac{l_x}{\delta}
\frac{y}{\delta} \left[ \sin\left( 8\pi \frac{x}{l_x} \right) + \frac{1}{8} \sin\left( 4\pi \frac{x}{l_x}
\right) + \frac{1}{16} \sin\left(2\pi \frac{x}{l_x} \right) \right] \\
v' \left( x, y \right) &= Ae^{-\sigma{\left(y/\delta\right)}^2 }\left[ \cos\left( 8\pi \frac{x}{l_x}
\right) + \frac{1}{8} \cos\left( 4\pi \frac{x}{l_x} \right) + \frac{1}{16} \cos\left( 2\pi \frac{x}{l_x}
\right) \right]
\end{align}
with $A=0.025\left(U_1-U_{2}\right)$ and $\sigma=0.05$.

The temperature field is given as
\begin{equation}
\begin{split}
T\left(y\right) =& \frac{1}{2c_p} \left[ -U^{2}\left(y\right) -U_{1}U_{2} + U\left(y\right) \left(U_1 +
U_2\right) \right] \\
&+ \left(T_1 - T_2 \right) \frac{U\left(y\right)}{U_1 - U_2} + \frac{T_{2}U_1 - T_{1}U_2}{U_1 - U_2}
\end{split}
\end{equation}
#+NAME: calc_T
#+BEGIN_SRC python
  def calc_T(T1, T2, u1, u2, u):

    cp = 1.0

    T = (1.0 / (2.0 * cp)) * (-u**2 - u1 * u2 + u * (u1 + u2)) \
        + ((T1 - T2) * u + (T2 * u1 - T1 * u2)) / (u1 - u2)

    return T
#+END_SRC

#+BEGIN_SRC python :noweb strip-export :results file
  import numpy as np
  import math
  import matplotlib.pyplot as plt

  <<calc_u1u2>>
  <<calc_meanvel>>
  <<calc_T>>

  T1=2.0

  u1, u2 = calc_u1u2(T1)
  U, y = calc_meanvel(u1, u2)
  T = calc_T(T1, 1.0, u1, u2, U)

  plt.plot(T, y)
  plt.axvline(1, color="black", ls="--")
  plt.axvline(2, color="black", ls="--")
  plt.xlabel("T")
  plt.ylabel("y")
  plt.xlim((0, 1.1 * max(T1, 1)))
  plt.savefig("2d-temperature.png")
  return "2d-temperature.png"
#+END_SRC

#+RESULTS:
[[file:2d-temperature.png]]

