#+TITLE: 3D Taylor-Green Vortex Comparison
#+AUTHOR: Paul Bartholomew

#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{nicefrac}
#+LATEX_HEADER: \hypersetup{colorlinks}

#+OPTIONS: toc:nil

#+BEGIN_abstract 
As part of the verification of =Xcompact3D= we simulate the Taylor-Green vortex and compare with
results from a reference 6^{th} order compact finite difference code provided by Eric Lamballais.
#+END_abstract

#+TOC: :headlines 2

* Introduction
 
As a canoncical test case, the Taylor-Green vortex provides a check that the time integration of the
Navier-Stokes is working correctly.
The Taylor-Green vortex is initialised as follows
\begin{equation}
  \boldsymbol{u} =
  \begin{cases}
    U \sin\left( \nicefrac{x}{\pi} \right) \cos\left( \nicefrac{y}{\pi} \right) \cos\left(
      \nicefrac{z}{\pi} \right)\\
    -U \cos\left( \nicefrac{x}{\pi} \right) \sin\left( \nicefrac{y}{\pi} \right) \cos\left(
      \nicefrac{z}{\pi} \right)\\
    0
  \end{cases}
\end{equation}
in the $-\pi\leq\boldsymbol{x}\leq\pi$ periodic box.
To save computational effort, the symmetries inherent in the flow field are exploited to simulate
only the impermeable sub-domain $0\leq\boldsymbol{x}\leq\pi$.

* Computational setup

** Discretisation

To ensure comparability of the results we must first ensure the same schemes are being used - the
pertinent variables are ~fpi2~ and ~ailcaix6~ (and ~y~ and ~z~) which should be set to 48/7/\pi^2 and 0.461658
in both codes.

** Runtime parameters

The runtime parameters pertinent to the simulation are given in table\nbsp[[tab:runparam]].

#+CAPTION: Runtime parameters for Taylor-Green Vortex simulations.
#+NAME: tab:runparam
| *Parameter*        |            *Value* | *Notes*                              |
|------------------+------------------+------------------------------------|
| ~xlx~              | 3.14159265358979 | ~yly~ and ~zlz~ the same               |
| ~nx~               |               65 | ~ny~ and ~nz~ the same                 |
|                  |                  | equivalent to a 129^3 domain        |
| ~nclx~             |                1 | ~ncly~ and ~nclz~ the same             |
|                  |                  | corresponds to free-slip           |
| ~dt~               |            0.001 |                                    |
| Time scheme      |              =RK3= |                                    |
| ~ilast~            |           20,000 |                                    |
| Output frequency |            1,000 | Stores snapshots every 1,000 steps |
|                  |                  |                                    |

** Statistics

The main statistics of interest for comparison purposes are the kinetic energy and enstrophy,
defined as
\begin{align}
  k &= \frac{1}{2} \int_{\Omega} {\boldsymbol{u}}^2 dV \ , \\
  \intertext{and}
  \varepsilon &= \int_{\Omega} {\left| \boldsymbol{\omega} \right|}^2 dV \ ,
\end{align}
where
\begin{equation}
  \boldsymbol{\omega} = \boldsymbol{\nabla} \times \boldsymbol{u} \ ,
\end{equation}
is the vorticity, these are computed online.
Time series of these statistics are recorded in the file =time_evol.dat= with the format shown in
table\nbsp[[tab:time_evol.dat]] (comment lines beginning with a =#= and and additional columns are ignored).

#+CAPTION: Output format for =time_evol.dat=
#+NAME: tab:time_evol.dat
| *#* | *TIME* | *KE* | *DISS* | *ENST* | *DISS2* |
|   | t1   | k1 | d1   | e1   | D1    |
|   | t2   | k2 | d2   | e2   | D2    |
|   | ...  |    |      |      |       |
|   | tn   | kn | dn   | en   | Dn    |

* Results 

** Data availability

The data in the form of enstrophy and kinetic energy evolutions are available for the reference and
comparison simulations [[https://imperialcollegelondon.box.com/s/p0tbirf3ps034yndm5sq10j2pkhvbt85][here]] and [[https://imperialcollegelondon.box.com/s/w7prpf8bheykw91lhlv7a0835f1pb37r][here]] respectively.
For post processing these datasets are expected to be placed in =./x3d/time_evol.dat= and
=./e3d/time_evol.dat= respectively, the shell script in listing\nbsp[[src:dl-ke-enstr.sh]] downloads and
places the files appropriately.
Also instantaneous snapshots of the flow field are downloaded for later post processing.

#+CAPTION: Shell script to download data for kinetic energy and enstrophy comparison.
#+NAME: src:dl-ke-enstr.sh
#+begin_src sh
  #!/bin/bash

  # Download links
  BOX_ADDR=https://imperialcollegelondon.box.com/shared/static
  E3D_DATA=p0tbirf3ps034yndm5sq10j2pkhvbt85.dat
  X3D_DATA=w7prpf8bheykw91lhlv7a0835f1pb37r.dat
  X3D_VISU=78lzzvm9hwe9aff2zb32bu1uvp9qbcbx.xz
  X3D_PARA=f8d24cs9x8xty95bt69jlckbq8dsi2a3.prm

  # Download data
  wget $BOX_ADDR/$E3D_DATA
  wget $BOX_ADDR/$X3D_DATA
  wget $BOX_ADDR/$X3D_VISU
  wget $BOX_ADDR/$X3D_PARA

  # Make directories
  mkdir ./e3d
  mkdir ./x3d

  # Move data to appropriate locations (untar as necessary)
  mv $E3D_DATA ./e3d/time_evol.dat
  mv $X3D_DATA ./x3d/time_evol.dat
  mv $X3D_VISU ./x3d/data.tar.xz && \
      tar -C x3d/ -xvf x3d/data.tar.xz --strip-components 1
#+end_src

#+RESULTS: src:dl-ke-enstr.sh
| data/vort017 |
| data/ux010   |
| data/ux004   |
| data/uy011   |
| data/vort004 |
| data/uy001   |
| data/uz019   |
| data/uy012   |
| data/uz001   |
| data/uy006   |
| data/vort016 |
| data/ux016   |
| data/uz014   |
| data/ux007   |
| data/uy016   |
| data/ux012   |
| data/uy005   |
| data/uz006   |
| data/vort010 |
| data/ux018   |
| data/vort013 |
| data/uy020   |
| data/uy010   |
| data/uz009   |
| data/vort009 |
| data/vort007 |
| data/ux013   |
| data/vort012 |
| data/ux020   |
| data/uz018   |
| data/vort014 |
| data/uz016   |
| data/uz008   |
| data/uy013   |
| data/ux008   |
| data/uy018   |
| data/uz012   |
| data/uy014   |
| data/uy019   |
| data/ux002   |
| data/uy003   |
| data/vort008 |
| data/uz015   |
| data/uz017   |
| data/uz005   |
| data/uz011   |
| data/uy009   |
| data/vort002 |
| data/uy015   |
| data/uy007   |
| data/uy017   |
| data/vort015 |
| data/uy004   |
| data/vort019 |
| data/ux005   |
| data/vort006 |
| data/uy008   |
| data/vort018 |
| data/uz007   |
| data/ux009   |
| data/ux006   |
| data/ux003   |
| data/ux017   |
| data/ux019   |
| data/uy002   |
| data/vort005 |
| data/uz002   |
| data/vort011 |
| data/ux015   |
| data/uz004   |
| data/vort001 |
| data/vort003 |
| data/uz010   |
| data/vort020 |
| data/ux014   |
| data/ux001   |
| data/uz013   |
| data/uz020   |
| data/ux011   |
| data/uz003   |

** Postprocessing results

Python code to read and plot the data (using =matplotlib=) are given in listings\nbsp[[src:read-stats.py]]
and\nbsp[[src:plot-stats.py]].

#+CAPTION: Python code to read statistics for TGV case.
#+NAME: src:read-stats.py
#+begin_src python
  def read_stats(filename):
    t = []
    enst = []
    ke = []

    with open(filename, "r") as data:
      print "Reading " + filename
      for row in data:
        if not (row[0]=="#"):
          words = row.split()
          t.append(float(words[0]))
          enst.append(float(words[3]))
          ke.append(float(words[1]))

    return t, enst, ke
#+end_src

#+CAPTION: Python code to plot comparison of =Xcompact3D= and Eric's reference code.
#+NAME: src:plot-stats.py
#+begin_src python
  def plot_stats(x3d_t, x3d_dat, x3d_lab, e3d_t, e3d_dat, e3d_lab,
                 xlab, ylab, outfile, figsize=(5.0, 3.5)):

    plt.figure(figsize=figsize)

    plt.plot(x3d_t, x3d_dat, label=x3d_lab)
    plt.plot(e3d_t, e3d_dat, label=e3d_lab)

    plt.xlabel(xlab)
    plt.ylabel(ylab)
    plt.legend(prop={"family":"serif",
                     "size":11})

    plt.savefig(outfile, bbox_inches="tight")
    plt.close()
#+end_src

** Comparison of results

Using the above functions, the script in listing\nbsp[[src:plot_tgv.py]] (=plot_tgv.py=) plots the data in
/fig./\nbsp[[fig:ke]] and /fig./\nbsp[[fig:enst]].
It is clear that there is excellent agreement between =Xcompact3D= and Eric's reference code.

#+CAPTION: Python script to plot comparison of =Xcompact3D= and Eric's reference code.
#+NAME: src:plot_tgv.py
#+begin_src python :noweb no-export :tangle plot_tgv.py
  import matplotlib.pyplot as plt
  plt.rc("text", usetex=True)
  plt.rc("font", family="serif")
  plt.rc("font", size=11)

  <<src:read-stats.py>>
  <<src:plot-stats.py>>

  x3d_t, x3d_enst, x3d_ke = read_stats("./x3d/time_evol.dat")
  e3d_t, e3d_enst, e3d_ke = read_stats("./e3d/time_evol.dat")

  plt.figure(figsize=(5.0, 3.5))
  plt.plot(x3d_t, x3d_enst, label="X3D")
  plt.plot(e3d_t, e3d_enst, label="Eric")
  plt.xlabel(r"$t$")
  plt.ylabel(r"$\varepsilon$")
  plt.legend(prop={"family":"serif",
                   "size":11})
  plt.savefig("tgv_enstrophy.eps", bbox_inches="tight")
  plt.close()

  plt.figure(figsize=(5.0, 3.5))
  plt.plot(x3d_t, x3d_ke, label="X3D")
  plt.plot(e3d_t, e3d_ke, label="Eric")
  plt.xlabel(r"$t$")
  plt.ylabel(r"$k$")
  plt.legend(prop={"family":"serif",
                   "size":11})
  plt.savefig("tgv_ke.eps", bbox_inches="tight")
  plt.close()
#+end_src

#+CAPTION:Comparison of kinetic energy
#+ATTR_LATEX: :options :width 0.75\textwidth
#+NAME: fig:ke
[[./tgv_ke.eps]]

#+CAPTION:Comparison of enstrophy
#+ATTR_LATEX: :options :width 0.75\textwidth
#+NAME: fig:enst
[[./tgv_enstrophy.eps]]

** Visualisation

The Taylor-Green vortex can be visualised by looking at the evolution of the instantaneous vorticity
fields.
As the output of =Xcompact3D= only includes the velocity and pressure fields, the vorticity field is
computed using =Py4Incompact3d=[fn:py4incompact-python3].

The computed vorticity fields are then visualised using =Paraview=, mirroring the \Omega=[0, \pi]^3 sub-domain
about the $x$, $y$ and $z$ axes to recover the full \Omega=[-\pi, \pi]^3 solution with isosurfaces shown at
several times in /fig./\nbsp[[fig:vort-iso]].
In order to visualise these fields, a =.xdmf= file must be generated to instruct =Paraview= how to read
the data, compiling the code in listing\nbsp[[src:paraview.f90]] and running the resulting executable will
generate the necessary =visu.xdmf= file.

#+CAPTION: Isosurfaces of vorticity *dummy figure*
#+ATTR_LATEX: :options :width 0.75\textwidth
#+NAME: fig:vort-iso
[[./tgv_enstrophy.eps]]

[fn:py4incompact-python3] For requirements see the =Py4Incompact3d= github project.

* Changelog

** [2019-04-26 Fri]

- Adding a paraview batch script
- Adding source code to generate =visu.xdmf=
- Adding a visualisation section
- Tidying up layout of the document
- Added shell script to download data from =box=

* Appendix

** =paraview.f90=

#+CAPTION: Source code for generating =visu.xdmf=
#+NAME: src:paraview.f90
#+begin_src f90 :tangle paraview.f90
  program visu_paraview

    implicit none

    integer(4) :: nx,ny,nz
    real(4) :: xlx,yly,zlz,dt,dx,dy,dz
    integer(4) :: nfiles, icrfile, file1, filen, ifile, dig1, dig2, dig3, dig4
    real(4), allocatable :: yp(:),y1(:),y3(:)
    integer(4) :: i, j, k, num, aig, ii, nfil,istret,nclx, ncly, nclz

    character(3) :: chits

    nx = 65
    ny = 65
    nz = 65

    xlx = 3.14159265358979
    yly = 3.14159265358979
    zlz = 3.14159265358979

    nclx = 1
    ncly = 1

    nfiles = 21
    file1 = 0
    filen = 20

    istret = 0

    if (nclx==0) then
       dx=xlx/nx
    else
       dx=xlx/(nx-1.)
    endif
    if (ncly==0) then
       dy=yly/ny
    else
       dy=yly/(ny-1.)
    endif
    if (nclz==0) then
       dz=zlz/nz
    else
       dz=zlz/(nz-1.)
    endif
    dt=1.

    allocate(y1(nx))
    allocate(yp(ny))
    allocate(y3(nz))
    do i=1,nx
       y1(i)=(i-1)*dx
    enddo
    if (istret==1) then
       print *,'We need to read the yp.dat file'
       open(12,file='yp1.dat',form='formatted',status='unknown')
       do j=1,ny
          read(12,*) yp(j)
       enddo
       close(12)
    else
       do j=1,ny
          yp(j)=(j-1)*dy
       enddo
    endif
    do k=1,nz
       y3(k)=(k-1)*dz
    enddo

    nfil=41
    open(nfil,file='visu.xdmf')

    write(nfil,'(A22)')'<?xml version="1.0" ?>'
    write(nfil,*)'<!DOCTYPE Xdmf SYSTEM "Xdmf.dtd" []>'
    write(nfil,*)'<Xdmf xmlns:xi="http://www.w3.org/2001/XInclude" Version="2.0">'
    write(nfil,*)'<Domain>'
    write(nfil,*)'    <Topology name="topo" TopologyType="3DRectMesh"'
    write(nfil,*)'        Dimensions="',nz,ny,nx,'">'
    write(nfil,*)'    </Topology>'
    write(nfil,*)'    <Geometry name="geo" Type="VXVYVZ">'
    write(nfil,*)'    <DataItem Dimensions="',nx,'" NumberType="Float" Precision="4" Format="XML">'
    write(nfil,*)'    ',y1(:) 
    write(nfil,*)'    </DataItem>'
    write(nfil,*)'    <DataItem Dimensions="',ny,'" NumberType="Float" Precision="4" Format="XML">'
    write(nfil,*)'    ',yp(:) 
    write(nfil,*)'    </DataItem>'
    write(nfil,*)'    <DataItem Dimensions="',nz,'" NumberType="Float" Precision="4" Format="XML">'
    write(nfil,*)'    ',y3(:) 
    write(nfil,*)'    </DataItem>'
    write(nfil,*)'    </Geometry>'
    write(nfil,'(/)')
    write(nfil,*)'    <Grid Name="TimeSeries" GridType="Collection" CollectionType="Temporal">'
    write(nfil,*)'        <Time TimeType="HyperSlab">'
    write(nfil,*)'            <DataItem Format="XML" NumberType="Float" Dimensions="3">'
    write(nfil,*)'           <!--Start, Stride, Count-->'
    write(nfil,*)'            0.0',dt
    write(nfil,*)'            </DataItem>'
    write(nfil,*)'        </Time>'

    do ifile = file1, filen

       !IF THE DATA ARE STORED WITH 3 DIGITS, IE UX001,UX002,ETC.
       dig1 =   ifile/100 + 48
       dig2 = ( ifile - 100*( ifile/100 ) )/10 + 48
       dig3 = ( ifile - 10*( ifile/10 ) )/1 + 48
       chits(1:3) = char(dig1)//char(dig2)//char(dig3)

       write(*,*) ifile, 'file'//chits

       write(nfil,'(/)')
       write(nfil,*)'        <Grid Name="'//chits//'" GridType="Uniform">'
       write(nfil,*)'            <Topology Reference="/Xdmf/Domain/Topology[1]"/>'
       write(nfil,*)'            <Geometry Reference="/Xdmf/Domain/Geometry[1]"/>'
       !SINGLE PRECISION-->Precision=4
       !DOUBLE PRECISION-->Precision=8

       write(nfil,*)'            <Attribute Name="vort" Center="Node">'
       write(nfil,*)'               <DataItem Format="Binary" '
       write(nfil,*)'                DataType="Float" Precision="8" Endian="little"'
       write(nfil,*)'                Dimensions="',nz,ny,nx,'">'
       write(nfil,*)'                  vort'//chits
       write(nfil,*)'               </DataItem>'
       write(nfil,*)'            </Attribute>'

       write(nfil,*)'        </Grid>'

    enddo
    write(nfil,'(/)')
    write(nfil,*)'    </Grid>'
    write(nfil,*)'</Domain>'
    write(nfil,'(A7)')'</Xdmf>'
    close(nfil)

  end program visu_paraview
#+end_src

** =parascript.py=

#+begin_src python
  # trace generated using paraview version 5.6.0

  #
  # To ensure correct image size when batch processing, please search 
  # for and uncomment the line `# renderView*.ViewSize = [*,*]`

  #### import the simple module from the paraview
  from paraview.simple import *
  #### disable automatic camera reset on 'Show'
  paraview.simple._DisableFirstRenderCameraReset()

  # create a new 'XDMF Reader'
  visuxdmf = XDMFReader(FileNames=['./x3d/visu.xdmf'])
  visuxdmf.PointArrayStatus = ['vort']

  # get animation scene
  animationScene1 = GetAnimationScene()

  # update animation scene based on data timesteps
  animationScene1.UpdateAnimationUsingDataTimeSteps()

  # Properties modified on visuxdmf
  visuxdmf.GridStatus = ['000', '002', '010', '020']

  # get active view
  renderView1 = GetActiveViewOrCreate('RenderView')
  # uncomment following to set a specific view size
  renderView1.ViewSize = [1612, 959]

  # show data in view
  visuxdmfDisplay = Show(visuxdmf, renderView1)

  # trace defaults for the display properties.
  visuxdmfDisplay.Representation = 'Outline'
  visuxdmfDisplay.AmbientColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.ColorArrayName = ['POINTS', '']
  visuxdmfDisplay.OSPRayScaleFunction = 'PiecewiseFunction'
  visuxdmfDisplay.SelectOrientationVectors = 'None'
  visuxdmfDisplay.ScaleFactor = 0.3141592741012573
  visuxdmfDisplay.SelectScaleArray = 'None'
  visuxdmfDisplay.GlyphType = 'Arrow'
  visuxdmfDisplay.GlyphTableIndexArray = 'None'
  visuxdmfDisplay.GaussianRadius = 0.015707963705062868
  visuxdmfDisplay.SetScaleArray = [None, '']
  visuxdmfDisplay.ScaleTransferFunction = 'PiecewiseFunction'
  visuxdmfDisplay.OpacityArray = [None, '']
  visuxdmfDisplay.OpacityTransferFunction = 'PiecewiseFunction'
  visuxdmfDisplay.DataAxesGrid = 'GridAxesRepresentation'
  visuxdmfDisplay.SelectionCellLabelFontFile = ''
  visuxdmfDisplay.SelectionPointLabelFontFile = ''
  visuxdmfDisplay.PolarAxes = 'PolarAxesRepresentation'

  # init the 'GridAxesRepresentation' selected for 'DataAxesGrid'
  visuxdmfDisplay.DataAxesGrid.XTitleColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.XTitleFontFile = ''
  visuxdmfDisplay.DataAxesGrid.YTitleColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.YTitleFontFile = ''
  visuxdmfDisplay.DataAxesGrid.ZTitleColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.ZTitleFontFile = ''
  visuxdmfDisplay.DataAxesGrid.GridColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.XLabelColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.XLabelFontFile = ''
  visuxdmfDisplay.DataAxesGrid.YLabelColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.YLabelFontFile = ''
  visuxdmfDisplay.DataAxesGrid.ZLabelColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.DataAxesGrid.ZLabelFontFile = ''

  # init the 'PolarAxesRepresentation' selected for 'PolarAxes'
  visuxdmfDisplay.PolarAxes.PolarAxisTitleColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.PolarAxes.PolarAxisTitleFontFile = ''
  visuxdmfDisplay.PolarAxes.PolarAxisLabelColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.PolarAxes.PolarAxisLabelFontFile = ''
  visuxdmfDisplay.PolarAxes.LastRadialAxisTextColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.PolarAxes.LastRadialAxisTextFontFile = ''
  visuxdmfDisplay.PolarAxes.SecondaryRadialAxesTextColor = [0.0, 0.0, 0.0]
  visuxdmfDisplay.PolarAxes.SecondaryRadialAxesTextFontFile = ''

  # reset view to fit data
  renderView1.ResetCamera()

  # get the material library
  materialLibrary1 = GetMaterialLibrary()

  # update the view to ensure updated data information
  renderView1.Update()

  # Properties modified on visuxdmfDisplay
  visuxdmfDisplay.SetScaleArray = [None, 'vort']

  # Properties modified on visuxdmfDisplay
  visuxdmfDisplay.OpacityArray = [None, 'vort']

  # Properties modified on visuxdmfDisplay
  visuxdmfDisplay.OSPRayScaleArray = 'vort'

  animationScene1.GoToNext()

  # create a new 'Contour'
  contour1 = Contour(Input=visuxdmf)
  contour1.ContourBy = ['POINTS', 'vort']
  contour1.Isosurfaces = [0.7878082597632795]
  contour1.PointMergeMethod = 'Uniform Binning'

  # Properties modified on contour1
  contour1.ComputeScalars = 1
  contour1.Isosurfaces = [0.1, 0.2727272727272727, 0.44545454545454544, 0.6181818181818182,
                          0.7909090909090909, 0.9636363636363636, 1.1363636363636362,
                          1.309090909090909, 1.481818181818182, 1.6545454545454545,
                          1.8272727272727272, 2.0]

  # show data in view
  contour1Display = Show(contour1, renderView1)

  # get color transfer function/color map for 'vort'
  vortLUT = GetColorTransferFunction('vort')

  # trace defaults for the display properties.
  contour1Display.Representation = 'Surface'
  contour1Display.AmbientColor = [0.0, 0.0, 0.0]
  contour1Display.ColorArrayName = ['POINTS', 'vort']
  contour1Display.LookupTable = vortLUT
  contour1Display.OSPRayScaleArray = 'vort'
  contour1Display.OSPRayScaleFunction = 'PiecewiseFunction'
  contour1Display.SelectOrientationVectors = 'None'
  contour1Display.ScaleFactor = 0.3141592741012573
  contour1Display.SelectScaleArray = 'vort'
  contour1Display.GlyphType = 'Arrow'
  contour1Display.GlyphTableIndexArray = 'vort'
  contour1Display.GaussianRadius = 0.015707963705062868
  contour1Display.SetScaleArray = ['POINTS', 'vort']
  contour1Display.ScaleTransferFunction = 'PiecewiseFunction'
  contour1Display.OpacityArray = ['POINTS', 'vort']
  contour1Display.OpacityTransferFunction = 'PiecewiseFunction'
  contour1Display.DataAxesGrid = 'GridAxesRepresentation'
  contour1Display.SelectionCellLabelFontFile = ''
  contour1Display.SelectionPointLabelFontFile = ''
  contour1Display.PolarAxes = 'PolarAxesRepresentation'

  # init the 'GridAxesRepresentation' selected for 'DataAxesGrid'
  contour1Display.DataAxesGrid.XTitleColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.XTitleFontFile = ''
  contour1Display.DataAxesGrid.YTitleColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.YTitleFontFile = ''
  contour1Display.DataAxesGrid.ZTitleColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.ZTitleFontFile = ''
  contour1Display.DataAxesGrid.GridColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.XLabelColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.XLabelFontFile = ''
  contour1Display.DataAxesGrid.YLabelColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.YLabelFontFile = ''
  contour1Display.DataAxesGrid.ZLabelColor = [0.0, 0.0, 0.0]
  contour1Display.DataAxesGrid.ZLabelFontFile = ''

  # init the 'PolarAxesRepresentation' selected for 'PolarAxes'
  contour1Display.PolarAxes.PolarAxisTitleColor = [0.0, 0.0, 0.0]
  contour1Display.PolarAxes.PolarAxisTitleFontFile = ''
  contour1Display.PolarAxes.PolarAxisLabelColor = [0.0, 0.0, 0.0]
  contour1Display.PolarAxes.PolarAxisLabelFontFile = ''
  contour1Display.PolarAxes.LastRadialAxisTextColor = [0.0, 0.0, 0.0]
  contour1Display.PolarAxes.LastRadialAxisTextFontFile = ''
  contour1Display.PolarAxes.SecondaryRadialAxesTextColor = [0.0, 0.0, 0.0]
  contour1Display.PolarAxes.SecondaryRadialAxesTextFontFile = ''

  # show color bar/color legend
  contour1Display.SetScalarBarVisibility(renderView1, True)

  # update the view to ensure updated data information
  renderView1.Update()

  # get opacity transfer function/opacity map for 'vort'
  vortPWF = GetOpacityTransferFunction('vort')

  # hide data in view
  Hide(contour1, renderView1)

  # set active source
  SetActiveSource(contour1)

  # show data in view
  contour1Display = Show(contour1, renderView1)

  # show color bar/color legend
  contour1Display.SetScalarBarVisibility(renderView1, True)

  # hide data in view
  Hide(visuxdmf, renderView1)

  # create a new 'Reflect'
  reflect1 = Reflect(Input=contour1)

  # show data in view
  reflect1Display = Show(reflect1, renderView1)

  # trace defaults for the display properties.
  reflect1Display.Representation = 'Surface'
  reflect1Display.AmbientColor = [0.0, 0.0, 0.0]
  reflect1Display.ColorArrayName = ['POINTS', 'vort']
  reflect1Display.LookupTable = vortLUT
  reflect1Display.OSPRayScaleArray = 'vort'
  reflect1Display.OSPRayScaleFunction = 'PiecewiseFunction'
  reflect1Display.SelectOrientationVectors = 'None'
  reflect1Display.ScaleFactor = 0.6283185482025146
  reflect1Display.SelectScaleArray = 'vort'
  reflect1Display.GlyphType = 'Arrow'
  reflect1Display.GlyphTableIndexArray = 'vort'
  reflect1Display.GaussianRadius = 0.031415927410125735
  reflect1Display.SetScaleArray = ['POINTS', 'vort']
  reflect1Display.ScaleTransferFunction = 'PiecewiseFunction'
  reflect1Display.OpacityArray = ['POINTS', 'vort']
  reflect1Display.OpacityTransferFunction = 'PiecewiseFunction'
  reflect1Display.DataAxesGrid = 'GridAxesRepresentation'
  reflect1Display.SelectionCellLabelFontFile = ''
  reflect1Display.SelectionPointLabelFontFile = ''
  reflect1Display.PolarAxes = 'PolarAxesRepresentation'
  reflect1Display.ScalarOpacityFunction = vortPWF
  reflect1Display.ScalarOpacityUnitDistance = 0.10211613031501872

  # init the 'GridAxesRepresentation' selected for 'DataAxesGrid'
  reflect1Display.DataAxesGrid.XTitleColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.XTitleFontFile = ''
  reflect1Display.DataAxesGrid.YTitleColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.YTitleFontFile = ''
  reflect1Display.DataAxesGrid.ZTitleColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.ZTitleFontFile = ''
  reflect1Display.DataAxesGrid.GridColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.XLabelColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.XLabelFontFile = ''
  reflect1Display.DataAxesGrid.YLabelColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.YLabelFontFile = ''
  reflect1Display.DataAxesGrid.ZLabelColor = [0.0, 0.0, 0.0]
  reflect1Display.DataAxesGrid.ZLabelFontFile = ''

  # init the 'PolarAxesRepresentation' selected for 'PolarAxes'
  reflect1Display.PolarAxes.PolarAxisTitleColor = [0.0, 0.0, 0.0]
  reflect1Display.PolarAxes.PolarAxisTitleFontFile = ''
  reflect1Display.PolarAxes.PolarAxisLabelColor = [0.0, 0.0, 0.0]
  reflect1Display.PolarAxes.PolarAxisLabelFontFile = ''
  reflect1Display.PolarAxes.LastRadialAxisTextColor = [0.0, 0.0, 0.0]
  reflect1Display.PolarAxes.LastRadialAxisTextFontFile = ''
  reflect1Display.PolarAxes.SecondaryRadialAxesTextColor = [0.0, 0.0, 0.0]
  reflect1Display.PolarAxes.SecondaryRadialAxesTextFontFile = ''

  # hide data in view
  Hide(contour1, renderView1)

  # show color bar/color legend
  reflect1Display.SetScalarBarVisibility(renderView1, True)

  # update the view to ensure updated data information
  renderView1.Update()

  # create a new 'Reflect'
  reflect2 = Reflect(Input=reflect1)

  # Properties modified on reflect2
  reflect2.Plane = 'Y Min'

  # show data in view
  reflect2Display = Show(reflect2, renderView1)

  # trace defaults for the display properties.
  reflect2Display.Representation = 'Surface'
  reflect2Display.AmbientColor = [0.0, 0.0, 0.0]
  reflect2Display.ColorArrayName = ['POINTS', 'vort']
  reflect2Display.LookupTable = vortLUT
  reflect2Display.OSPRayScaleArray = 'vort'
  reflect2Display.OSPRayScaleFunction = 'PiecewiseFunction'
  reflect2Display.SelectOrientationVectors = 'None'
  reflect2Display.ScaleFactor = 0.6283185482025146
  reflect2Display.SelectScaleArray = 'vort'
  reflect2Display.GlyphType = 'Arrow'
  reflect2Display.GlyphTableIndexArray = 'vort'
  reflect2Display.GaussianRadius = 0.031415927410125735
  reflect2Display.SetScaleArray = ['POINTS', 'vort']
  reflect2Display.ScaleTransferFunction = 'PiecewiseFunction'
  reflect2Display.OpacityArray = ['POINTS', 'vort']
  reflect2Display.OpacityTransferFunction = 'PiecewiseFunction'
  reflect2Display.DataAxesGrid = 'GridAxesRepresentation'
  reflect2Display.SelectionCellLabelFontFile = ''
  reflect2Display.SelectionPointLabelFontFile = ''
  reflect2Display.PolarAxes = 'PolarAxesRepresentation'
  reflect2Display.ScalarOpacityFunction = vortPWF
  reflect2Display.ScalarOpacityUnitDistance = 0.09934969814391542

  # init the 'GridAxesRepresentation' selected for 'DataAxesGrid'
  reflect2Display.DataAxesGrid.XTitleColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.XTitleFontFile = ''
  reflect2Display.DataAxesGrid.YTitleColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.YTitleFontFile = ''
  reflect2Display.DataAxesGrid.ZTitleColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.ZTitleFontFile = ''
  reflect2Display.DataAxesGrid.GridColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.XLabelColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.XLabelFontFile = ''
  reflect2Display.DataAxesGrid.YLabelColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.YLabelFontFile = ''
  reflect2Display.DataAxesGrid.ZLabelColor = [0.0, 0.0, 0.0]
  reflect2Display.DataAxesGrid.ZLabelFontFile = ''

  # init the 'PolarAxesRepresentation' selected for 'PolarAxes'
  reflect2Display.PolarAxes.PolarAxisTitleColor = [0.0, 0.0, 0.0]
  reflect2Display.PolarAxes.PolarAxisTitleFontFile = ''
  reflect2Display.PolarAxes.PolarAxisLabelColor = [0.0, 0.0, 0.0]
  reflect2Display.PolarAxes.PolarAxisLabelFontFile = ''
  reflect2Display.PolarAxes.LastRadialAxisTextColor = [0.0, 0.0, 0.0]
  reflect2Display.PolarAxes.LastRadialAxisTextFontFile = ''
  reflect2Display.PolarAxes.SecondaryRadialAxesTextColor = [0.0, 0.0, 0.0]
  reflect2Display.PolarAxes.SecondaryRadialAxesTextFontFile = ''

  # hide data in view
  Hide(reflect1, renderView1)

  # show color bar/color legend
  reflect2Display.SetScalarBarVisibility(renderView1, True)

  # update the view to ensure updated data information
  renderView1.Update()

  # create a new 'Reflect'
  reflect3 = Reflect(Input=reflect2)

  # Properties modified on reflect3
  reflect3.Plane = 'Z Min'

  # show data in view
  reflect3Display = Show(reflect3, renderView1)

  # trace defaults for the display properties.
  reflect3Display.Representation = 'Surface'
  reflect3Display.AmbientColor = [0.0, 0.0, 0.0]
  reflect3Display.ColorArrayName = ['POINTS', 'vort']
  reflect3Display.LookupTable = vortLUT
  reflect3Display.OSPRayScaleArray = 'vort'
  reflect3Display.OSPRayScaleFunction = 'PiecewiseFunction'
  reflect3Display.SelectOrientationVectors = 'None'
  reflect3Display.ScaleFactor = 0.6283185482025146
  reflect3Display.SelectScaleArray = 'vort'
  reflect3Display.GlyphType = 'Arrow'
  reflect3Display.GlyphTableIndexArray = 'vort'
  reflect3Display.GaussianRadius = 0.031415927410125735
  reflect3Display.SetScaleArray = ['POINTS', 'vort']
  reflect3Display.ScaleTransferFunction = 'PiecewiseFunction'
  reflect3Display.OpacityArray = ['POINTS', 'vort']
  reflect3Display.OpacityTransferFunction = 'PiecewiseFunction'
  reflect3Display.DataAxesGrid = 'GridAxesRepresentation'
  reflect3Display.SelectionCellLabelFontFile = ''
  reflect3Display.SelectionPointLabelFontFile = ''
  reflect3Display.PolarAxes = 'PolarAxesRepresentation'
  reflect3Display.ScalarOpacityFunction = vortPWF
  reflect3Display.ScalarOpacityUnitDistance = 0.09074217211951403

  # init the 'GridAxesRepresentation' selected for 'DataAxesGrid'
  reflect3Display.DataAxesGrid.XTitleColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.XTitleFontFile = ''
  reflect3Display.DataAxesGrid.YTitleColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.YTitleFontFile = ''
  reflect3Display.DataAxesGrid.ZTitleColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.ZTitleFontFile = ''
  reflect3Display.DataAxesGrid.GridColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.XLabelColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.XLabelFontFile = ''
  reflect3Display.DataAxesGrid.YLabelColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.YLabelFontFile = ''
  reflect3Display.DataAxesGrid.ZLabelColor = [0.0, 0.0, 0.0]
  reflect3Display.DataAxesGrid.ZLabelFontFile = ''

  # init the 'PolarAxesRepresentation' selected for 'PolarAxes'
  reflect3Display.PolarAxes.PolarAxisTitleColor = [0.0, 0.0, 0.0]
  reflect3Display.PolarAxes.PolarAxisTitleFontFile = ''
  reflect3Display.PolarAxes.PolarAxisLabelColor = [0.0, 0.0, 0.0]
  reflect3Display.PolarAxes.PolarAxisLabelFontFile = ''
  reflect3Display.PolarAxes.LastRadialAxisTextColor = [0.0, 0.0, 0.0]
  reflect3Display.PolarAxes.LastRadialAxisTextFontFile = ''
  reflect3Display.PolarAxes.SecondaryRadialAxesTextColor = [0.0, 0.0, 0.0]
  reflect3Display.PolarAxes.SecondaryRadialAxesTextFontFile = ''

  # hide data in view
  Hide(reflect2, renderView1)

  # show color bar/color legend
  reflect3Display.SetScalarBarVisibility(renderView1, True)

  # update the view to ensure updated data information
  renderView1.Update()

  # Properties modified on renderView1
  renderView1.OrientationAxesVisibility = 0

  # Apply a preset using its name. Note this may not work as expected when
  # presets have duplicate names.
  vortLUT.ApplyPreset('Rainbow Desaturated', True)

  # reset view to fit data
  renderView1.ResetCamera()

  # hide color bar/color legend
  reflect3Display.SetScalarBarVisibility(renderView1, False)

  # current camera placement for renderView1
  renderView1.CameraPosition = [-13.664485571984146, 13.664485571984144, 8.00447032521683]
  renderView1.CameraFocalPoint = [-3.806023374435661e-22, -9.619397662556435e-21,
                                  -2.7059805007309844e-21]
  renderView1.CameraViewUp = [0.2705980500730985, -0.27059805007309845, 0.9238795325112868]
  renderView1.CameraParallelScale = 5.413637463530484

  # save screenshot
  SaveScreenshot('/home/paul/src/org/data-analysis/eCSE1303/tgv/x3d/foo.png', renderView1,
                 ImageResolution=[5000, 2974], TransparentBackground=1)

#+end_src
