#+TITLE: 3D Taylor-Green Vortex Comparison
#+AUTHOR: Paul Bartholomew

#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{nicefrac}
#+LATEX_HEADER: \hypersetup{colorlinks}

#+OPTIONS: toc:nil

#+BEGIN_abstract 
As part of the verification of =Xcompact3D= we simulate the Taylor-Green vortex and compare with
results from a reference 6^{th} order compact finite difference code provided by Eric Lamballais.
#+END_abstract

#+TOC: :headlines 2

* Introduction
 
As a canoncical test case, the Taylor-Green vortex provides a check that the time integration of the
Navier-Stokes is working correctly.
The Taylor-Green vortex is initialised as follows
\begin{equation}
  \boldsymbol{u} =
  \begin{cases}
    U \sin\left( \nicefrac{x}{\pi} \right) \cos\left( \nicefrac{y}{\pi} \right) \cos\left(
      \nicefrac{z}{\pi} \right)\\
    -U \cos\left( \nicefrac{x}{\pi} \right) \sin\left( \nicefrac{y}{\pi} \right) \cos\left(
      \nicefrac{z}{\pi} \right)\\
    0
  \end{cases}
\end{equation}
in the $-\pi\leq\boldsymbol{x}\leq\pi$ periodic box.
To save computational effort, the symmetries inherent in the flow field are exploited to simulate
only the impermeable sub-domain $0\leq\boldsymbol{x}\leq\pi$.

* Computational setup

** Discretisation

To ensure comparability of the results we must first ensure the same schemes are being used - the
pertinent variables are ~fpi2~ and ~ailcaix6~ (and ~y~ and ~z~) which should be set to 48/7/\pi^2 and 0.461658
in both codes.

** Runtime parameters

The runtime parameters pertinent to the simulation are given in table\nbsp[[tab:runparam]].

#+CAPTION: Runtime parameters for Taylor-Green Vortex simulations.
#+NAME: tab:runparam
| *Parameter*        |            *Value* | *Notes*                              |
|------------------+------------------+------------------------------------|
| ~xlx~              | 3.14159265358979 | ~yly~ and ~zlz~ the same               |
| ~nx~               |               65 | ~ny~ and ~nz~ the same                 |
|                  |                  | equivalent to a 129^3 domain        |
| ~nclx~             |                1 | ~ncly~ and ~nclz~ the same             |
|                  |                  | corresponds to free-slip           |
| ~dt~               |            0.001 |                                    |
| Time scheme      |              =RK3= |                                    |
| ~ilast~            |           20,000 |                                    |
| Output frequency |            1,000 | Stores snapshots every 1,000 steps |
|                  |                  |                                    |

* Results 

** Data availability

The data in the form of enstrophy and kinetic energy evolutions are available for the reference and
comparison simulations [[https://imperialcollegelondon.box.com/s/p0tbirf3ps034yndm5sq10j2pkhvbt85][here]] and [[https://imperialcollegelondon.box.com/s/w7prpf8bheykw91lhlv7a0835f1pb37r][here]] respectively.
For post processing these datasets are expected to be placed in =./x3d/time_evol.dat= and
=./e3d/time_evol.dat= respectively, the shell script in listing\nbsp[[src:dl-ke-enstr.sh]] downloads and
places the files appropriately.

#+CAPTION: Shell script to download data for kinetic energy and enstrophy comparison.
#+NAME: src:dl-ke-enstr.sh
#+begin_src sh
  #!/bin/bash

  # Download links
  BOX_ADDR=https://imperialcollegelondon.box.com/shared/static
  E3D_DATA=p0tbirf3ps034yndm5sq10j2pkhvbt85.dat
  X3D_DATA=w7prpf8bheykw91lhlv7a0835f1pb37r.dat

  wget $BOX_ADDR/$E3D_DATA
  wget $BOX_ADDR/$X3D_DATA

  mkdir ./e3d
  mkdir ./x3d

  mv $E3D_DATA ./e3d/time_evol.dat
  mv $X3D_DATA ./x3d/time_evol.dat
#+end_src

#+RESULTS: src:dl-ke-enstr.sh

** Postprocessing results

The main statistics of interest for comparison purposes are the kinetic energy and enstrophy,
defined as
\begin{align}
  k &= \frac{1}{2} \int_{\Omega} {\boldsymbol{u}}^2 dV \ , \\
  \intertext{and}
  \varepsilon &= \int_{\Omega} {\left| \boldsymbol{\omega} \right|}^2 dV \ ,
\end{align}
where
\begin{equation}
  \boldsymbol{\omega} = \boldsymbol{\nabla} \times \boldsymbol{u} \ ,
\end{equation}
is the vorticity.

The codes compute these statistics online, here a =python= script has been developed to plot them for
comparison.
It expects that the data are located in =./x3d/time_evol.dat= and =./e3d/time_evol.dat=
with the following format (comment lines beginning with a =#= and and additional columns are ignored)

| *#* | *TIME* | *KE* | *DISS* | *ENST* | *DISS2* |
|   | t1   | k1 | d1   | e1   | D1    |
|   | t2   | k2 | d2   | e2   | D2    |
|   | ...  |    |      |      |       |
|   | tn   | kn | dn   | en   | Dn    |

which can be read by following =python= snippet given in listing\nbsp[[src:read-stats.py]].

#+CAPTION: Python code to read statistics for TGV case.
#+NAME: src:read-stats.py
#+begin_src python
  def read_stats(filename):
    t = []
    enst = []
    ke = []

    with open(filename, "r") as data:
      print "Reading " + filename
      for row in data:
        if not (row[0]=="#"):
          words = row.split()
          t.append(float(words[0]))
          enst.append(float(words[3]))
          ke.append(float(words[1]))

    return t, enst, ke
#+end_src

The data are plotted using =matplotlib= in listing\nbsp[[src:plot-stats.py]].

#+CAPTION: Python code to plot comparison of =Xcompact3D= and Eric's reference code.
#+NAME: src:plot-stats.py
#+begin_src python
  def plot_stats(x3d_t, x3d_dat, x3d_lab, e3d_t, e3d_dat, e3d_lab,
                 xlab, ylab, outfile, figsize=(5.0, 3.5)):

    plt.figure(figsize=figsize)

    plt.plot(x3d_t, x3d_dat, label=x3d_lab)
    plt.plot(e3d_t, e3d_dat, label=e3d_lab)

    plt.xlabel(xlab)
    plt.ylabel(ylab)
    plt.legend(prop={"family":"serif",
                     "size":11})

    plt.savefig(outfile, bbox_inches="tight")
    plt.close()
#+end_src

** Comparison of results

Using the above functions, the script in listing\nbsp[[src:plot_tgv.py]] (=plot_tgv.py=) plots the data in
/fig./\nbsp[[fig:ke]] and /fig./\nbsp[[fig:enst]].
It is clear that there is excellent agreement between =Xcompact3D= and Eric's reference code.

#+CAPTION: Python script to plot comparison of =Xcompact3D= and Eric's reference code.
#+NAME: src:plot_tgv.py
#+begin_src python :noweb no-export :tangle plot_tgv.py
  import matplotlib.pyplot as plt
  plt.rc("text", usetex=True)
  plt.rc("font", family="serif")
  plt.rc("font", size=11)

  <<src:read-stats.py>>
  <<src:plot-stats.py>>

  x3d_t, x3d_enst, x3d_ke = read_stats("./x3d/time_evol.dat")
  e3d_t, e3d_enst, e3d_ke = read_stats("./e3d/time_evol.dat")

  plt.figure(figsize=(5.0, 3.5))
  plt.plot(x3d_t, x3d_enst, label="X3D")
  plt.plot(e3d_t, e3d_enst, label="Eric")
  plt.xlabel(r"$t$")
  plt.ylabel(r"$\varepsilon$")
  plt.legend(prop={"family":"serif",
                   "size":11})
  plt.savefig("tgv_enstrophy.eps", bbox_inches="tight")
  plt.close()

  plt.figure(figsize=(5.0, 3.5))
  plt.plot(x3d_t, x3d_ke, label="X3D")
  plt.plot(e3d_t, e3d_ke, label="Eric")
  plt.xlabel(r"$t$")
  plt.ylabel(r"$k$")
  plt.legend(prop={"family":"serif",
                   "size":11})
  plt.savefig("tgv_ke.eps", bbox_inches="tight")
  plt.close()
#+end_src

#+CAPTION:Comparison of kinetic energy
#+NAME: fig:ke
[[./tgv_ke.eps]]

#+CAPTION:Comparison of enstrophy
#+NAME: fig:enst
[[./tgv_enstrophy.eps]]

